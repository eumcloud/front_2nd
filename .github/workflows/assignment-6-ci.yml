name: CI Assignment 6

on:
  pull_request:
    paths:
      - 'packages/assignment-6/**' # /packages/assignment-6 경로만 체크
    types: [opened, synchronize] # 풀 리퀘스트가 열리거나 동기화될 때 트리거

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # 코드 체크아웃

      - name: Setup Node.js
        uses: actions/setup-node@v4 # Node.js 설정
        with:
          node-version: '20.x' # 최신 LTS 버전 사용

      - name: Install dependencies
        run: npm install # 종속성 설치

      - name: Run TypeScript compiler
        run: npm run tsc # TypeScript 컴파일러 실행
        continue-on-error: true # 오류가 발생해도 다음 단계로 진행

      - name: Comment on PR for tsc errors
        if: failure() # 이전 단계가 실패한 경우 실행
        uses: actions/github-script@v6
        with:
          script: |
            const { execSync } = require('child_process');
            const errors = execSync('npm run tsc 2>&1').toString();
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `TypeScript compile errors:\n\`\`\`\n${errors}\n\`\`\``
            });

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # 코드 체크아웃

      - name: Setup Node.js
        uses: actions/setup-node@v4 # Node.js 설정
        with:
          node-version: '20.x' # 최신 LTS 버전 사용

      - name: Install dependencies
        run: npm install # 종속성 설치

      - name: Run ESLint
        run: npm run lint # ESLint 실행
        continue-on-error: true # 오류가 발생해도 다음 단계로 진행

      - name: Comment on PR for ESLint errors
        if: failure() # 이전 단계가 실패한 경우 실행
        uses: actions/github-script@v6
        with:
          script: |
            const { execSync } = require('child_process');
            const errors = execSync('npm run lint 2>&1').toString();
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ESLint errors:\n\`\`\`\n${errors}\n\`\`\``
            });

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # 코드 체크아웃

      - name: Setup Node.js
        uses: actions/setup-node@v4 # Node.js 설정
        with:
          node-version: '20.x' # 최신 LTS 버전 사용

      - name: Install dependencies
        run: npm install # 종속성 설치

      - name: Run tests and measure coverage
        run: npm run test -- --coverage # 테스트 실행 및 커버리지 측정
        continue-on-error: true # 오류가 발생해도 다음 단계로 진행

      - name: Comment on PR with coverage report
        if: always() # 항상 실행
        uses: actions/github-script@v6
        with:
          script: |
            const { execSync } = require('child_process');
            const coverage = execSync('cat packages/assignment-6/coverage/lcov-report/index.html').toString();
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Test coverage report:\n\`\`\`\n${coverage}\n\`\`\``
            });

  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # 코드 체크아웃

      - name: Setup Node.js
        uses: actions/setup-node@v4 # Node.js 설정
        with:
          node-version: '20.x' # 최신 LTS 버전 사용

      - name: Install dependencies
        run: npm install # 종속성 설치

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.7.x # Lighthouse CI 설치

      - name: Run Lighthouse CI
        run: lhci autorun # Lighthouse CI 실행
        continue-on-error: true # 오류가 발생해도 다음 단계로 진행

      - name: Comment on PR with Lighthouse report
        if: always() # 항상 실행
        uses: actions/github-script@v6
        with:
          script: |
            const { execSync } = require('child_process');
            const report = execSync('lhci report --output html').toString();
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Lighthouse CI report:\n\`\`\`\n${report}\n\`\`\``
            });

  assign_reviewer:
    if: github.event.action == 'opened' # 풀 리퀘스트가 열릴 때 실행
    runs-on: ubuntu-latest
    steps:
      - name: Choose a random reviewer
        id: choose_reviewer
        run: |
          reviewers=($(gh api -H "Accept: application/vnd.github.v3+json" \
          /repos/$GITHUB_REPOSITORY/collaborators \
          | jq -r '.[].login'))
          selected_reviewer=${reviewers[$RANDOM % ${#reviewers[@]}]}
          echo "::set-output name=reviewer::$selected_reviewer"

      - name: Assign reviewer
        uses: kentaro-m/auto-assign-action@v2.2.1 # 리뷰어 자동 할당
        with:
          reviewers: ${{ steps.choose_reviewer.outputs.reviewer }}

      - name: Comment on PR with assigned reviewer
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `@${{ steps.choose_reviewer.outputs.reviewer }} has been assigned as a reviewer.`
            });
