name: assignment-6

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'packages/assignment-6/**'

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - run: pnpm install

  build:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - run: pnpm install
      - name: Run TypeScript compiler
        id: tsc
        run: |
          TSC_OUTPUT=$(pnpm -F assignment-6 tsc 2>&1 || true)
          echo "tsc_output<<EOF" >> $GITHUB_OUTPUT
          echo "$TSC_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Post TypeScript compiler results
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: TypeScript Compiler Results
          GITHUB_TOKEN: ${{ secrets.TOKEN_FOR_CI }}
          message: |
            ## TypeScript Compiler Results
            ```
            ${{ steps.tsc.outputs.tsc_output }}
            ```
      - name: Run build
        id: build
        run: |
          BUILD_OUTPUT=$(pnpm -F assignment-6 build 2>&1 || true)
          echo "build_output<<EOF" >> $GITHUB_OUTPUT
          echo "$BUILD_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Post build results
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: Build Results
          GITHUB_TOKEN: ${{ secrets.TOKEN_FOR_CI }}
          message: |
            ## Build Results
            ```
            ${{ steps.build.outputs.build_output }}
            ```

  lint:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - run: pnpm install
      - name: Run ESLint
        id: lint
        run: |
          LINT_OUTPUT=$(npx eslint --ext .ts,.tsx --max-warnings 0 packages/assignment-6/src 2>&1 || true)
          echo "lint_output<<EOF" >> $GITHUB_OUTPUT
          echo "$LINT_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Post lint results
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: ESLint Results
          GITHUB_TOKEN: ${{ secrets.TOKEN_FOR_CI }}
          message: |
            ## ESLint Results
            ```
            ${{ steps.lint.outputs.lint_output }}
            ```

  test:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - run: pnpm install
      - name: Run Tests and Measure Coverage
        run: pnpm -F assignment-6 test -- --coverage > test_output.txt
      - name: Extract Coverage Data
        id: coverage
        run: |
          echo "lines=$(grep -oP 'All files.*?\|\s*\K[0-9.]+(?=\s*\|)' test_output.txt)" >> $GITHUB_OUTPUT
          echo "statements=$(grep -oP 'All files.*?\|.*?\|\s*\K[0-9.]+(?=\s*\|)' test_output.txt)" >> $GITHUB_OUTPUT
          echo "functions=$(grep -oP 'All files.*?\|.*?\|.*?\|\s*\K[0-9.]+(?=\s*\|)' test_output.txt)" >> $GITHUB_OUTPUT
          echo "branches=$(grep -oP 'All files.*?\|.*?\|.*?\|.*?\|\s*\K[0-9.]+(?=\s*\|)' test_output.txt)" >> $GITHUB_OUTPUT
      - name: Post Test Coverage comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.TOKEN_FOR_CI }}
          header: Test Coverage Report
          message: |
            ## 테스트 성공 ✅
            **커버리지 결과**
            - 라인 커버리지: ${{ steps.coverage.outputs.lines }}%
            - 구문 커버리지: ${{ steps.coverage.outputs.statements }}%
            - 함수 커버리지: ${{ steps.coverage.outputs.functions }}%
            - 브랜치 커버리지: ${{ steps.coverage.outputs.branches }}%

  lighthouse:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - run: pnpm install
      - name: Start dev server
        run: pnpm -F assignment-6 start > server.log 2>&1 &
        env:
          PORT: 5173
      - name: Wait for dev server
        run: |
          echo "Waiting for dev server to start..."
          timeout=60
          elapsed=0
          while ! nc -z localhost 5173 && [ $elapsed -lt $timeout ]; do
            sleep 1
            elapsed=$((elapsed+1))
          done
          if [ $elapsed -ge $timeout ]; then
            echo "Timeout: Dev server did not start within ${timeout} seconds"
            echo "Server log:"
            cat server.log
            exit 1
          fi
          echo "Dev server is up and running"
      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun --collect.url=http://localhost:5173 --upload.target=filesystem --upload.outputDir=./lighthouse-results
      - name: Post Lighthouse Results
        id: lighthouse
        run: |
          LATEST_REPORT=$(ls -t ./lighthouse-results/*.report.json | head -n1)
          if [ -f "$LATEST_REPORT" ]; then
            LIGHTHOUSE_RESULT=$(cat << EOF
          ## Lighthouse 성능 측정 결과

          | 카테고리 | 점수 |
          | --- | --- |
          | Performance | $(jq '.categories.performance.score * 100' < "$LATEST_REPORT")% |
          | Accessibility | $(jq '.categories.accessibility.score * 100' < "$LATEST_REPORT")% |
          | Best Practices | $(jq '.categories["best-practices"].score * 100' < "$LATEST_REPORT")% |
          | SEO | $(jq '.categories.seo.score * 100' < "$LATEST_REPORT")% |
          EOF
          )
            echo "result<<EOF" >> $GITHUB_OUTPUT
            echo "$LIGHTHOUSE_RESULT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "result=Lighthouse 결과 파일을 찾을 수 없습니다." >> $GITHUB_OUTPUT
          fi
      - name: Post Lighthouse comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.TOKEN_FOR_CI }}
          header: Lighthouse 성능 측정 결과
          message: ${{ steps.lighthouse.outputs.result }}

  assign_reviewer:
    if: github.event.action == 'opened'
    runs-on: ubuntu-latest
    steps:
      - name: Set reviewer
        run: |
          REVIEWERS=("naturekim" "HM970506")
          RANDOM_REVIEWER=${REVIEWERS[$RANDOM % ${#REVIEWERS[@]}]}
          echo "random_reviewer=$RANDOM_REVIEWER" >> $GITHUB_ENV
      - name: Post review request comment
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const reviewer = process.env.random_reviewer;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `@${reviewer} 님, 이 PR의 리뷰를 부탁드립니다.`
            });