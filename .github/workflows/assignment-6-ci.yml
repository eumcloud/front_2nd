name: PR Checks

on:
  pull_request:
    paths:
      - 'packages/assignment-6/**'

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile

  build:
    name: Build and Type Check
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile
      - name: Run build
        run: pnpm --filter assignment-6 build
      - name: Comment build result
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '빌드 성공 ✅'
            })

  lint:
    name: ESLint
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile
      - name: Run ESLint
        run: pnpm --filter assignment-6 lint -- --output-file eslint_report.txt
      - name: Comment ESLint result
        if: failure()
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs')
            const eslintOutput = fs.readFileSync('packages/assignment-6/eslint_report.txt', 'utf8')
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ESLint 검사 결과:\n```\n' + eslintOutput + '\n```'
            })

  test:
    name: Run Tests and Coverage
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile
      - name: Run tests with coverage
        run: pnpm --filter assignment-6 test -- --coverage
      - name: Comment test coverage
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs')
            const coverage = fs.readFileSync('./packages/assignment-6/coverage/coverage-summary.json', 'utf8')
            const coverageJson = JSON.parse(coverage)
            const lines = coverageJson.total.lines.pct
            const branches = coverageJson.total.branches.pct
            const functions = coverageJson.total.functions.pct
            const statements = coverageJson.total.statements.pct
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `테스트 성공 ✅\n\n커버리지 결과\n- 라인 커버리지: ${lines}%\n- 브랜치 커버리지: ${branches}%\n- 함수 커버리지: ${functions}%\n- 구문 커버리지: ${statements}%`
            })

  lighthouse:
    name: Lighthouse CI
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile
      - name: Build for production
        run: pnpm --filter assignment-6 build
      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.11.x
          lhci autorun
      - name: Comment Lighthouse result
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs')
            const lhciReport = fs.readFileSync('./packages/assignment-6/.lighthouseci/lhci-report.json', 'utf8')
            const reportJson = JSON.parse(lhciReport)
            const categories = reportJson[0].categories
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Lighthouse 성능 측정 결과\n\n| 카테고리 | 점수 |\n|----------|------|\n| Performance | ${categories.performance.score * 100}% |\n| Accessibility | ${categories.accessibility.score * 100}% |\n| Best Practices | ${categories['best-practices'].score * 100}% |\n| SEO | ${categories.seo.score * 100}% |`
            })

  assign-reviewer:
    name: Assign Random Reviewer
    runs-on: ubuntu-latest
    if: github.event.action == 'opened'
    steps:
      - name: Assign random reviewer
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const teamMembers = ['seodonggyun4', 'haeji1124', '2pandi', 'jiyeon87', 'Raihyul', 'AnSuebin']
            const randomReviewer = teamMembers[Math.floor(Math.random() * teamMembers.length)]
            
            await github.rest.pulls.requestReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              reviewers: [randomReviewer]
            })
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `@${randomReviewer} 님, 리뷰를 부탁드립니다.`
            })